buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
//    dependencies {
//	  classpath "edu.kit.ifv.codegen.gradle.plugin:code-gen-gradle-plugin:latest.integration"
//  	}
}


plugins {
    id 'java'
    id 'eclipse'
    id 'maven'
    id 'signing'
    id "maven-publish"
    id 'jacoco'
}

group = 'edu.kit.ifv.mobitopp'
archivesBaseName = "logitopp"
version = project.hasProperty('next_version') ? project.property('next_version') : '0.0-SNAPSHOT'
wrapper.gradleVersion = '6.3'

sourceCompatibility = 1.12
targetCompatibility = 1.12

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://oss.jfrog.org/artifactory/oss-snapshot-local' }
    maven { url "https://jitpack.io" }
}

configurations.all {
    exclude group: 'xerces', module: 'xerces'
}

dependencies {
    annotationProcessor 'org.projectlombok:lombok:1.18.8'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.8'
    
    compileOnly 'org.projectlombok:lombok:1.18.8'
    
	compile 'edu.kit.ifv.mobitopp:mobitopp:[0.2.3,)',
			'org.jgrapht:jgrapht-core:1.3.0'
	 
	testCompile 'org.projectlombok:lombok:1.18.8'
	testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0',
                       'org.junit.jupiter:junit-jupiter-migrationsupport:5.7.0',
                       'org.junit.vintage:junit-vintage-engine:5.7.0',
                       'org.mockito:mockito-core:3.0.0',
                       'org.assertj:assertj-core:3.13.2'
}

//def choiceModelsDirectory = "${rootDir}/choice-models"
//apply plugin: 'edu.kit.ifv.codegen.gradle.plugin'
//codeGenInp {
//  outputDir = "${rootDir}/src/main/java"
//  files = ["${choiceModelsDirectory}/number-of-parcels-choice-model.gen", 
//           "${choiceModelsDirectory}/parcel-destination-choice-model.gen"]
//}
//compileJava.dependsOn('generateCode')

test {
    useJUnitPlatform()
    enableAssertions = "true"
    maxHeapSize = "2G"
    testLogging.showStandardStreams = true
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}




publishing {
    publications {
        release(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId project.group
            artifactId project.name
            version project.version
        }
        snapshot(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId project.group
            artifactId project.name
            def buildNumber = project.hasProperty('build_number') ? project.property('build_number') : '123'
            def snapshotVersion = project.version.replaceAll("\\.${buildNumber}", '') + '-SNAPSHOT'
            version snapshotVersion
        }
        mavenJava(MavenPublication) {
        	from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId project.group
            artifactId project.name
            version project.version
            pom {
                name = 'logitopp'
                description = 'An extension of mobiTopp for simulating parcel deliveries'
                url = 'https://github.com/kit-ifv/logitopp'
                licenses {
                    license {
                        name = 'GNU GENERAL PUBLIC LICENSE, Version 3'
                        url = 'https://www.gnu.org/licenses/gpl-3.0-standalone.html'
                    }
                }
                developers {
                    developer {
                        id = 'jk'
                        name = 'Jelle Kuebler'
                        email = 'jelle.kuebler@kit.edu'
                    }
                }
                scm {
                    connection = 'scm:git:git:https://github.com/kit-ifv/logitopp.git'
                    developerConnection = 'scm:git:ssh:git@github.com:kit-ifv/logitopp.git'
                    url = 'https://github.com/kit-ifv/logitopp'
                }
            }
        
        }
    }
    repositories {
        maven {
        	name = 'Internal'
            credentials {
                username getPropertyOrDefault('repositoryUsername')
                password getPropertyOrDefault('repositoryPassword')
            }
            def repositoryUrl = getPropertyOrDefault('repositoryUrl')
            def releasesRepoUrl = "${repositoryUrl}/repository/maven-releases"
            def snapshotsRepoUrl = "${repositoryUrl}/repository/maven-snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
        maven {
        	name = 'External'
            credentials {
                username getPropertyOrDefault('user_oss')
                password getPropertyOrDefault('pw_oss')
            }

            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

task publishAndCheckRelease() {
	dependsOn publishReleasePublicationToInternalRepository
	
	if (project.hasProperty('isRelease') && project.property('isRelease').toBoolean()) {
		print('New Release')
		dependsOn publishMavenJavaPublicationToExternalRepository
	} else {
		print('No Release')
	}
	
}

configure(publishAndCheckRelease) {
	group = 'publishing'
	description = 'Publish to internal repo. Also publish staging release to external repo if "isRelease" is set.'
}



def getPropertyOrDefault(key) {
    return project.hasProperty(key) ? project.property(key) : key
}